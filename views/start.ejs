<!DOCTYPE html>
<html lang="en">
<head>
	<title>Humming It</title>
	<meta charset="utf-8">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
	<script src="https://cdn.webrtc-experiment.com/RecordRTC.js"></script>
	<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
	<link rel="stylesheet" type="text/css" href="/start.css">
	<style type="text/css">
		.custom-body {
			position: absolute;
			display: -webkit-box;
			display: -webkit-flex;
			display: -ms-flexbox;
			display: flex;
			-webkit-box-pack: center;
			-webkit-justify-content: center;
				-ms-flex-pack: center;
					justify-content: center;
			-webkit-box-align: center;
			-webkit-align-items: center;
				-ms-flex-align: center;
					align-items: center;
			min-height: 80vh;
			width: 100%;
			margin: 0;
		}
		.holder {
			background-color: #4c474c;
			background-image: -webkit-gradient(linear, left bottom, left top, from(#4c474c), to(#141414));
			background-image: -o-linear-gradient(bottom, #4c474c 0%, #141414 100%);
			background-image: linear-gradient(0deg, #4c474c 0%, #141414 100%);
			padding: 15px;
			width: 420px;
			
			border-radius: 50px;
		}
		[data-role="controls"] > button {
			margin: 50px auto;
			outline: none;
			display: block;
			border: none;
			background-color: #D9AFD9;
			background-image: -webkit-gradient(linear, left bottom, left top, from(#D9AFD9), to(#97D9E1));
			background-image: -o-linear-gradient(bottom, #D9AFD9 0%, #97D9E1 100%);
			background-image: linear-gradient(0deg, #D9AFD9 0%, #97D9E1 100%);
			width: 100px;
			height: 100px;
			border-radius: 50%;
			text-indent: -1000em;
			cursor: pointer;
			-webkit-box-shadow: 0px 5px 5px 2px rgba(0,0,0,0.3) inset, 
				0px 0px 0px 30px #fff, 0px 0px 0px 35px #333;
					box-shadow: 0px 5px 5px 2px rgba(0,0,0,0.3) inset, 
				0px 0px 0px 30px #fff, 0px 0px 0px 35px #333;
		}
		[data-role="controls"] > button:hover {
			background-color: #ee7bee;
			background-image: -webkit-gradient(linear, left bottom, left top, from(#ee7bee), to(#6fe1f5));
			background-image: -o-linear-gradient(bottom, #ee7bee 0%, #6fe1f5 100%);
			background-image: linear-gradient(0deg, #ee7bee 0%, #6fe1f5 100%);
		}
		[data-role="controls"] > button[data-recording="true"] {
			background-color: #ff2038;
			background-image: -webkit-gradient(linear, left bottom, left top, from(#ff2038), to(#b30003));
			background-image: -o-linear-gradient(bottom, #ff2038 0%, #b30003 100%);
			background-image: linear-gradient(0deg, #ff2038 0%, #b30003 100%);
		}
		[data-role="recordings"] > .row {
			width: auto;
			height: auto;
			padding: 20px;
		}
		[data-role="recordings"] > .row > audio {
			outline: none;
		}
		[data-role="recordings"] > .row > a {
			display: inline-block;
			text-align: center;
			font-size: 20px;
			line-height: 50px;
			vertical-align: middle;
			width: 50px;
			height: 50px;
			border-radius: 20px;
			color: #fff;
			font-weight: bold;
			text-decoration: underline;
			background-color: #0093E9;
			background-image: -webkit-gradient(linear, left bottom, left top, from(#0093E9), to(#80D0C7));
			background-image: -o-linear-gradient(bottom, #0093E9 0%, #80D0C7 100%);
			background-image: linear-gradient(0deg, #0093E9 0%, #80D0C7 100%);
			float: right;
			margin-left: 20px;
			cursor: pointer;
		}
		[data-role="recordings"] > .row > a:hover {
			text-decoration: none;
		}
		[data-role="recordings"] > .row > a:active {
			background-image: -webkit-gradient(linear, left top, left bottom, from(#0093E9), to(#80D0C7));
			background-image: -o-linear-gradient(top, #0093E9 0%, #80D0C7 100%);
			background-image: linear-gradient(180deg, #0093E9 0%, #80D0C7 100%);
		}
	</style>
	<script type="text/javascript" src="https://code.jquery.com/jquery.min.js"></script>
	<script src="https://stephino.github.io/dist/recorder.js"></script>
	<script>
		jQuery(document).ready(function () {
			var $ = jQuery;
			var number = 1
			
			window.AudioContext = window.AudioContext ||
					window.webkitAudioContext;

			navigator.getMedia = ( navigator.getUserMedia ||
					navigator.webkitGetUserMedia ||
					navigator.mozGetUserMedia ||
					navigator.msGetUserMedia);
			

			var audioContext = new AudioContext();
			var list_midi = [];
			var myRecorder = {
				objects: {
					context: null,
					stream: null,
					recorder: null
				},
				init: function () {
					if (null === myRecorder.objects.context) {
						myRecorder.objects.context = new (
								window.AudioContext || window.webkitAudioContext
								);
					}
				},
				start: function () {
					var btn = document.getElementById("my_desc");
					btn.textContent = 'Recording...';
					audioContext.resume().then(() => {
						console.log('Playback resumed successfully');
					});


					list_midi = []
					var tempo = document.getElementById('tempo_data').value;
					console.log(tempo)
					var EACH_BEAT = 0.185

					var gotStreamCallback = function gotStreamCallbackFunction(mediaStream) {
						var microphoneSource = audioContext.createMediaStreamSource(mediaStream);
						var tuner = new Tuner(microphoneSource, audioContext.destination, audioContext);
						var divisor = Math.round(Math.round(((60 / tempo) / EACH_BEAT) * 100) / 100);
						if (divisor < 1) {
							divisor = 1;
						}
				
						tuner.start(function(note) {
							$('#note').text(note);
							
							number += 1;
							if (number % divisor == 0) {
								list_midi.push(note)
								// console.log(list_midi, divisor);
							}
						});
					};
					var errorCallback = function errorCallbackFunction(error) {
						console.log(error);
					};
				
					navigator.getMedia({audio: true}, gotStreamCallback, errorCallback);

					var options = {audio: true, video: false};
					navigator.mediaDevices.getUserMedia(options).then(function (stream) {
						myRecorder.objects.stream = stream;
						myRecorder.objects.recorder = new Recorder(
								myRecorder.objects.context.createMediaStreamSource(stream),
								{numChannels: 1}
						);
						myRecorder.objects.recorder.record();
					}).catch(function (err) {});
				},
				stop: function (listObject) {
					var btn = document.getElementById("my_desc");
					btn.textContent = 'Playback your recordings';
					audioContext.suspend().then(() => {
						console.log('Playback stopped successfully');
					});

					if (null !== myRecorder.objects.stream) {
						myRecorder.objects.stream.getAudioTracks()[0].stop();
					}
					if (null !== myRecorder.objects.recorder) {
						myRecorder.objects.recorder.stop();

						// Validate object
						if (null !== listObject
								&& 'object' === typeof listObject
								&& listObject.length > 0) {
							// Export the WAV file
							myRecorder.objects.recorder.exportWAV(function (blob) {
								var url = (window.URL || window.webkitURL)
										.createObjectURL(blob);

								// Prepare the playback
								var audioObject = $('<audio controls></audio>')
										.attr('src', url);

								// Prepare the download link
								var downloadObject = $('<a>&#9660;</a>')
										.attr('href', url)
										.attr('download', new Date().toUTCString() + '.wav');

								// Wrap everything in a row
								var holderObject = $('<div class="row"></div>')
										.append(audioObject)
										.append(downloadObject);

								// Append to the list
								listObject.append(holderObject);
							});

							// Process list_midi
							notes_midi = []
							for (midi_note of list_midi) {
								notes_midi.push(midi_note.match(/[ABCDEFG]#?[0-9]/)[0]);
							}
							console.log(notes_midi);
							$.ajax({
							    type: "POST",
							    dataType: "json",
							    data: JSON.stringify({notes:notes_midi, tempo: document.getElementById('tempo_data').value}),
							    contentType: 'application/json',
							    url: "/api/midi",
							    success: function(data){
							        $('#result_place').html(
							        	$('#result_place').html() + "<br><a href='/" + data.file_name + "'>Recording</a>"
							        );
							        console.log("<br><a href='/" + data.file_name + "'>Recording</a>");
							    }
							});
						}
					}
				}
			};

			// Prepare the recordings list
			var listObject = $('[data-role="recordings"]');

			// Prepare the record button
			$('[data-role="controls"] > button').click(function () {
				// Initialize the recorder
				myRecorder.init();

				// Get the button state 
				var buttonState = !!$(this).attr('data-recording');

				// Toggle
				if (!buttonState) {
					$(this).attr('data-recording', 'true');
					myRecorder.start();
				} else {
					$(this).attr('data-recording', '');
					myRecorder.stop(listObject);
				}
			});
		});
	</script>
	<script src="jquery-1.11.0.min.js"></script>
    <script src='lib/frequenciesextractor.js'></script>
    <script src='lib/notesfrequencies.js'></script>
    <script src='tuner.js'></script>
</head>
<body>
	<nav>
		<h3 id="logo">Humming It!</h3>
	</nav>
	<div id="overlay" onclick="off()"></div>
	<div>
		<div class="custom-body" style='float: left; margin-left: -400px;'>
			<div style="width: 500px; height: 50px; margin-right: -100px;">
				<p style="font-size: 28px;"><b>Generate voice data</b></p>
				<img src='/images/itunes.jpeg' style="border-radius: 50%; float: left; width: 50px;">
				<div style="margin-left: 20px; border-radius: 10px; height: 50px; background-color: black; font-size: 16px; float: left; width: 240px;">
					<div style="position: relative; top: 20%; text-align: center; color: white; font-size: 16px; float: left; width: 100px;"><b>Tempo: </b></div>
					<input id='tempo_data' style="position: relative; top: 20%; text-align: center; color: black; font-size: 16px; float: left; width: 100px;"></input>
				</div>

				<button class='overlay-button' onclick="on()">Start the magic!</button>
				<br style="clear: left;" />
			</div>
			<div class="holder">
				<div data-role="controls">
					<p id='my_desc'>Click me to start recording</p>
					<button id='my_button'>Record</button>
					
				</div>
				<div data-role="recordings"></div>
			</div>
		</div>

		<div class="headerDivider"></div>

		<div class="new-holder" style='float: right; margin-top: 10%; margin-right: 8%;;'>
			<p style="color: white; font-size: 24px;" id='result_place'>Results:</p>
		</div>
	</div>
	
	<div class="footer">
		<p style="font-size: 14px; padding-top: 5px;">&copy; 2021 Hack and Roll Humming It!</p>
	</div>
	<script>
		function on() {
		  document.getElementById("overlay").style.display = "block";
		}
		
		function off() {
		  document.getElementById("overlay").style.display = "none";
		}
		</script>
	<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
</body>
</html>
